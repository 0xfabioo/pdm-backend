import json
from html.parser import HTMLParser
from typing import List, Tuple

import requests


class PythonVersionParser(HTMLParser):
    def __init__(self, *, convert_charrefs=True):
        super().__init__(convert_charrefs=convert_charrefs)
        self._parsing_release_number_span = False
        self._parsing_release_number_a = False
        self.parsed_python_versions = []

    def handle_starttag(self, tag: str, attrs: List[Tuple[str, str]]):
        if tag == "span" and any(
            "release-number" in value for key, value in attrs if key == "class"
        ):
            self._parsing_release_number_span = True
            return

        if self._parsing_release_number_span and tag == "a":
            self._parsing_release_number_a = True

    def handle_endtag(self, tag: str):
        if self._parsing_release_number_span and tag == "span":
            self._parsing_release_number_span = False

        if self._parsing_release_number_a and tag == "a":
            self._parsing_release_number_a = False

    def handle_data(self, data: str):
        if self._parsing_release_number_a:
            self.parsed_python_versions.append(data[7:])


def fetch_from_python_org() -> List[str]:
    resp = requests.get("https://python.org/downloads")
    resp_text = resp.text
    parser = PythonVersionParser()
    parser.feed(resp_text)
    return parser.parsed_python_versions


DEFAULT_FETCHER = fetch_from_python_org


def dumps_python_version_module(python_versions: List[str]) -> str:
    raw = (
        "# Generated by scripts/fetch_python_versions.py\n"
        "AVAILABLE_PYTHON_VERSIONS = " + json.dumps(python_versions, indent=4)
    )
    return raw


if __name__ == "__main__":
    python_versions = DEFAULT_FETCHER()
    python_versions.sort()
    python_versions.reverse()
    text = dumps_python_version_module(python_versions)
    print(text)
